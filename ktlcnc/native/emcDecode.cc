// Include all NML, CMS, and RCS classes and functions
#include "rcs.hh"

#include "emc.hh"
#include "emc_nml.hh"

/*
 * NML/CMS Format function : emcFormat
 * Automatically generated by NML CodeGen Java Applet.
 * on Sat Oct 11 13:45:16 UTC 2003
 */
int emcDecode(NMLTYPE type, void *buffer, CMS * cms) {
  switch (type) {
    case EMC_ABORT_TYPE: ((EMC_ABORT *) buffer)->update(cms); break;
    case EMC_AUX_ESTOP_RESET_TYPE: ((EMC_AUX_ESTOP_RESET *) buffer)->update(cms); break;
    case EMC_AUX_ESTOP_OFF_TYPE: ((EMC_AUX_ESTOP_OFF *) buffer)->update(cms); break;
    case EMC_AUX_ESTOP_ON_TYPE: ((EMC_AUX_ESTOP_ON *) buffer)->update(cms); break;
    case EMC_AUX_STAT_TYPE: ((EMC_AUX_STAT *) buffer)->update(cms); break;
    case EMC_JOINT_ABORT_TYPE: ((EMC_JOINT_ABORT *) buffer)->update(cms); break;
    case EMC_JOINT_ACTIVATE_TYPE: ((EMC_JOINT_ACTIVATE *) buffer)->update(cms); break;
    case EMC_JOINT_DEACTIVATE_TYPE: ((EMC_JOINT_DEACTIVATE *) buffer)->update(cms); break;
    case EMC_JOINT_DISABLE_TYPE: ((EMC_JOINT_DISABLE *) buffer)->update(cms); break;
    case EMC_JOINT_ENABLE_TYPE: ((EMC_JOINT_ENABLE *) buffer)->update(cms); break;
    case EMC_JOINT_HALT_TYPE: ((EMC_JOINT_HALT *) buffer)->update(cms); break;
    case EMC_JOINT_HOME_TYPE: ((EMC_JOINT_HOME *) buffer)->update(cms); break;
    case EMC_JOINT_UNHOME_TYPE: ((EMC_JOINT_UNHOME *) buffer)->update(cms); break;
    case EMC_JOINT_INIT_TYPE: ((EMC_JOINT_INIT *) buffer)->update(cms); break;
    case EMC_JOG_CONT_TYPE: ((EMC_JOG_CONT *) buffer)->update(cms); break;
    case EMC_JOG_INCR_TYPE: ((EMC_JOG_INCR *) buffer)->update(cms); break;
    case EMC_JOG_ABS_TYPE: ((EMC_JOG_ABS *) buffer)->update(cms); break;
    case EMC_JOG_STOP_TYPE: ((EMC_JOG_STOP *) buffer)->update(cms); break;
    case EMC_JOINT_LOAD_COMP_TYPE: ((EMC_JOINT_LOAD_COMP *) buffer)->update(cms); break;
    case EMC_JOINT_OVERRIDE_LIMITS_TYPE: ((EMC_JOINT_OVERRIDE_LIMITS *) buffer)->update(cms); break;
    case EMC_JOINT_SET_JOINT_TYPE: ((EMC_JOINT_SET_JOINT *) buffer)->update(cms); break;
    case EMC_JOINT_SET_FERROR_TYPE: ((EMC_JOINT_SET_FERROR *) buffer)->update(cms); break;
    case EMC_JOINT_SET_BACKLASH_TYPE: ((EMC_JOINT_SET_BACKLASH *) buffer)->update(cms); break;
    case EMC_JOINT_SET_HOMING_PARAMS_TYPE: ((EMC_JOINT_SET_HOMING_PARAMS *) buffer)->update(cms); break;
    case EMC_JOINT_SET_MAX_POSITION_LIMIT_TYPE: ((EMC_JOINT_SET_MAX_POSITION_LIMIT *) buffer)->update(cms); break;
    case EMC_JOINT_SET_MAX_VELOCITY_TYPE: ((EMC_JOINT_SET_MAX_VELOCITY *) buffer)->update(cms); break;
    case EMC_JOINT_SET_MIN_FERROR_TYPE: ((EMC_JOINT_SET_MIN_FERROR *) buffer)->update(cms); break;
    case EMC_JOINT_SET_MIN_POSITION_LIMIT_TYPE: ((EMC_JOINT_SET_MIN_POSITION_LIMIT *) buffer)->update(cms); break;
    case EMC_JOINT_SET_UNITS_TYPE: ((EMC_JOINT_SET_UNITS *) buffer)->update(cms); break;
    case EMC_JOINT_STAT_TYPE: ((EMC_JOINT_STAT *) buffer)->update(cms); break;
    case EMC_COOLANT_FLOOD_OFF_TYPE: ((EMC_COOLANT_FLOOD_OFF *) buffer)->update(cms); break;
    case EMC_COOLANT_FLOOD_ON_TYPE: ((EMC_COOLANT_FLOOD_ON *) buffer)->update(cms); break;
    case EMC_COOLANT_MIST_OFF_TYPE: ((EMC_COOLANT_MIST_OFF *) buffer)->update(cms); break;
    case EMC_COOLANT_MIST_ON_TYPE: ((EMC_COOLANT_MIST_ON *) buffer)->update(cms); break;
    case EMC_COOLANT_STAT_TYPE: ((EMC_COOLANT_STAT *) buffer)->update(cms); break;
    case EMC_HALT_TYPE: ((EMC_HALT *) buffer)->update(cms); break;
    case EMC_INIT_TYPE: ((EMC_INIT *) buffer)->update(cms); break;
    case EMC_IO_ABORT_TYPE: ((EMC_IO_ABORT *) buffer)->update(cms); break;
    case EMC_IO_HALT_TYPE: ((EMC_IO_HALT *) buffer)->update(cms); break;
    case EMC_IO_INIT_TYPE: ((EMC_IO_INIT *) buffer)->update(cms); break;
    case EMC_IO_SET_CYCLE_TIME_TYPE: ((EMC_IO_SET_CYCLE_TIME *) buffer)->update(cms); break;
    case EMC_IO_STAT_TYPE: ((EMC_IO_STAT *) buffer)->update(cms); break;
    case EMC_LUBE_OFF_TYPE: ((EMC_LUBE_OFF *) buffer)->update(cms); break;
    case EMC_LUBE_ON_TYPE: ((EMC_LUBE_ON *) buffer)->update(cms); break;
    case EMC_LUBE_STAT_TYPE: ((EMC_LUBE_STAT *) buffer)->update(cms); break;
    case EMC_MOTION_ABORT_TYPE: ((EMC_MOTION_ABORT *) buffer)->update(cms); break;
    case EMC_MOTION_HALT_TYPE: ((EMC_MOTION_HALT *) buffer)->update(cms); break;
    case EMC_MOTION_INIT_TYPE: ((EMC_MOTION_INIT *) buffer)->update(cms); break;
    case EMC_MOTION_SET_AOUT_TYPE: ((EMC_MOTION_SET_AOUT *) buffer)->update(cms); break;
    case EMC_MOTION_SET_DOUT_TYPE: ((EMC_MOTION_SET_DOUT *) buffer)->update(cms); break;
    case EMC_MOTION_ADAPTIVE_TYPE: ((EMC_MOTION_ADAPTIVE *) buffer)->update(cms); break;
    case EMC_MOTION_STAT_TYPE: ((EMC_MOTION_STAT *) buffer)->update(cms); break;
    case EMC_NULL_TYPE: ((EMC_NULL *) buffer)->update(cms); break;
    case EMC_OPERATOR_DISPLAY_TYPE: ((EMC_OPERATOR_DISPLAY *) buffer)->update(cms); break;
    case EMC_OPERATOR_ERROR_TYPE: ((EMC_OPERATOR_ERROR *) buffer)->update(cms); break;
    case EMC_OPERATOR_TEXT_TYPE: ((EMC_OPERATOR_TEXT *) buffer)->update(cms); break;
    case EMC_SYSTEM_CMD_TYPE: ((EMC_SYSTEM_CMD *) buffer)->update(cms); break;
    case EMC_SET_DEBUG_TYPE: ((EMC_SET_DEBUG *) buffer)->update(cms); break;
    case EMC_SPINDLE_BRAKE_ENGAGE_TYPE: ((EMC_SPINDLE_BRAKE_ENGAGE *) buffer)->update(cms); break;
    case EMC_SPINDLE_BRAKE_RELEASE_TYPE: ((EMC_SPINDLE_BRAKE_RELEASE *) buffer)->update(cms); break;
    case EMC_SPINDLE_CONSTANT_TYPE: ((EMC_SPINDLE_CONSTANT *) buffer)->update(cms); break;
    case EMC_SPINDLE_DECREASE_TYPE: ((EMC_SPINDLE_DECREASE *) buffer)->update(cms); break; case EMC_SPINDLE_INCREASE_TYPE:
	((EMC_SPINDLE_INCREASE *) buffer)->update(cms); break; case EMC_SPINDLE_OFF_TYPE:
	((EMC_SPINDLE_OFF *) buffer)->update(cms); break; case EMC_SPINDLE_ON_TYPE:
	((EMC_SPINDLE_ON *) buffer)->update(cms); break; case EMC_SPINDLE_SPEED_TYPE:
	((EMC_SPINDLE_SPEED *) buffer)->update(cms); break; case EMC_SPINDLE_ORIENT_TYPE:
	((EMC_SPINDLE_ORIENT *) buffer)->update(cms); break; case EMC_SPINDLE_WAIT_ORIENT_COMPLETE_TYPE:
	((EMC_SPINDLE_WAIT_ORIENT_COMPLETE *) buffer)->update(cms); break;
    case EMC_SPINDLE_STAT_TYPE: ((EMC_SPINDLE_STAT *) buffer)->update(cms); break;
    case EMC_STAT_TYPE: ((EMC_STAT *) buffer)->update(cms); break;
    case EMC_TASK_ABORT_TYPE: ((EMC_TASK_ABORT *) buffer)->update(cms); break;
    case EMC_TASK_HALT_TYPE: ((EMC_TASK_HALT *) buffer)->update(cms); break;
    case EMC_TASK_INIT_TYPE: ((EMC_TASK_INIT *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_CLOSE_TYPE: ((EMC_TASK_PLAN_CLOSE *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_END_TYPE: ((EMC_TASK_PLAN_END *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_EXECUTE_TYPE: ((EMC_TASK_PLAN_EXECUTE *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_INIT_TYPE: ((EMC_TASK_PLAN_INIT *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_OPEN_TYPE: ((EMC_TASK_PLAN_OPEN *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_PAUSE_TYPE: ((EMC_TASK_PLAN_PAUSE *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_READ_TYPE: ((EMC_TASK_PLAN_READ *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_RESUME_TYPE: ((EMC_TASK_PLAN_RESUME *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_RUN_TYPE: ((EMC_TASK_PLAN_RUN *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_STEP_TYPE: ((EMC_TASK_PLAN_STEP *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_SYNCH_TYPE: ((EMC_TASK_PLAN_SYNCH *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_SET_OPTIONAL_STOP_TYPE: ((EMC_TASK_PLAN_SET_OPTIONAL_STOP *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_SET_BLOCK_DELETE_TYPE: ((EMC_TASK_PLAN_SET_BLOCK_DELETE *) buffer)->update(cms); break;
    case EMC_TASK_PLAN_OPTIONAL_STOP_TYPE: ((EMC_TASK_PLAN_OPTIONAL_STOP *) buffer)->update(cms); break;
    case EMC_TASK_SET_MODE_TYPE: ((EMC_TASK_SET_MODE *) buffer)->update(cms); break;
    case EMC_TASK_SET_STATE_TYPE: ((EMC_TASK_SET_STATE *) buffer)->update(cms); break;
    case EMC_TASK_STAT_TYPE: ((EMC_TASK_STAT *) buffer)->update(cms); break;
    case EMC_TOOL_ABORT_TYPE: ((EMC_TOOL_ABORT *) buffer)->update(cms); break;
    case EMC_TOOL_HALT_TYPE: ((EMC_TOOL_HALT *) buffer)->update(cms); break;
    case EMC_TOOL_INIT_TYPE: ((EMC_TOOL_INIT *) buffer)->update(cms); break;
    case EMC_TOOL_LOAD_TYPE: ((EMC_TOOL_LOAD *) buffer)->update(cms); break;
    case EMC_TOOL_LOAD_TOOL_TABLE_TYPE: ((EMC_TOOL_LOAD_TOOL_TABLE *) buffer)->update(cms); break;
    case EMC_TOOL_PREPARE_TYPE: ((EMC_TOOL_PREPARE *) buffer)->update(cms); break;
    case EMC_TOOL_SET_OFFSET_TYPE: ((EMC_TOOL_SET_OFFSET *) buffer)->update(cms); break;
    case EMC_TOOL_SET_NUMBER_TYPE: ((EMC_TOOL_SET_NUMBER *) buffer)->update(cms); break;
    case EMC_TOOL_START_CHANGE_TYPE: ((EMC_TOOL_START_CHANGE *) buffer)->update(cms); break;
    case EMC_TOOL_STAT_TYPE: ((EMC_TOOL_STAT *) buffer)->update(cms); break;
    case EMC_TOOL_UNLOAD_TYPE: ((EMC_TOOL_UNLOAD *) buffer)->update(cms); break;
    case EMC_TRAJ_ABORT_TYPE: ((EMC_TRAJ_ABORT *) buffer)->update(cms); break;
    case EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG_TYPE: ((EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG *) buffer)->update(cms); break;
    case EMC_TRAJ_DELAY_TYPE: ((EMC_TRAJ_DELAY *) buffer)->update(cms); break;
    case EMC_TRAJ_DISABLE_TYPE: ((EMC_TRAJ_DISABLE *) buffer)->update(cms); break;
    case EMC_TRAJ_ENABLE_TYPE: ((EMC_TRAJ_ENABLE *) buffer)->update(cms); break;
    case EMC_TRAJ_HALT_TYPE: ((EMC_TRAJ_HALT *) buffer)->update(cms); break;
    case EMC_TRAJ_INIT_TYPE: ((EMC_TRAJ_INIT *) buffer)->update(cms); break;
    case EMC_TRAJ_LINEAR_MOVE_TYPE: ((EMC_TRAJ_LINEAR_MOVE *) buffer)->update(cms); break;
    case EMC_TRAJ_CIRCULAR_MOVE_TYPE: ((EMC_TRAJ_CIRCULAR_MOVE *) buffer)->update(cms); break;
    case EMC_TRAJ_RIGID_TAP_TYPE: ((EMC_TRAJ_RIGID_TAP *) buffer)->update(cms); break;
    case EMC_TRAJ_PAUSE_TYPE: ((EMC_TRAJ_PAUSE *) buffer)->update(cms); break;
    case EMC_TRAJ_PROBE_TYPE: ((EMC_TRAJ_PROBE *) buffer)->update(cms); break;
    case EMC_AUX_INPUT_WAIT_TYPE: ((EMC_AUX_INPUT_WAIT *) buffer)->update(cms); break;
    case EMC_TRAJ_RESUME_TYPE: ((EMC_TRAJ_RESUME *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_ACCELERATION_TYPE: ((EMC_TRAJ_SET_ACCELERATION *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_AXES_TYPE: ((EMC_TRAJ_SET_AXES *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_CYCLE_TIME_TYPE: ((EMC_TRAJ_SET_CYCLE_TIME *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_HOME_TYPE: ((EMC_TRAJ_SET_HOME *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_MAX_ACCELERATION_TYPE: ((EMC_TRAJ_SET_MAX_ACCELERATION *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_MAX_VELOCITY_TYPE: ((EMC_TRAJ_SET_MAX_VELOCITY *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_MODE_TYPE: ((EMC_TRAJ_SET_MODE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_MOTION_ID_TYPE: ((EMC_TRAJ_SET_MOTION_ID *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_OFFSET_TYPE: ((EMC_TRAJ_SET_OFFSET *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_G5X_TYPE: ((EMC_TRAJ_SET_G5X *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_G92_TYPE: ((EMC_TRAJ_SET_G92 *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_ROTATION_TYPE: ((EMC_TRAJ_SET_ROTATION *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_SCALE_TYPE: ((EMC_TRAJ_SET_SCALE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_RAPID_SCALE_TYPE: ((EMC_TRAJ_SET_RAPID_SCALE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_SPINDLE_SCALE_TYPE: ((EMC_TRAJ_SET_SPINDLE_SCALE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_FO_ENABLE_TYPE: ((EMC_TRAJ_SET_FO_ENABLE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_SO_ENABLE_TYPE: ((EMC_TRAJ_SET_SO_ENABLE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_FH_ENABLE_TYPE: ((EMC_TRAJ_SET_FH_ENABLE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_TELEOP_ENABLE_TYPE: ((EMC_TRAJ_SET_TELEOP_ENABLE *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_TERM_COND_TYPE: ((EMC_TRAJ_SET_TERM_COND *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_SPINDLESYNC_TYPE: ((EMC_TRAJ_SET_SPINDLESYNC *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_UNITS_TYPE: ((EMC_TRAJ_SET_UNITS *) buffer)->update(cms); break;
    case EMC_TRAJ_SET_VELOCITY_TYPE: ((EMC_TRAJ_SET_VELOCITY *) buffer)->update(cms); break;
    case EMC_TRAJ_STAT_TYPE: ((EMC_TRAJ_STAT *) buffer)->update(cms); break;
    case EMC_TRAJ_STEP_TYPE: ((EMC_TRAJ_STEP *) buffer)->update(cms); break;
    default: return (0);
  }
  return 1;
  }

